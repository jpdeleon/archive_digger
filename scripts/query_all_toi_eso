#!/usr/bin/env python

import sys
import pyvo as vo
from astropy.coordinates import SkyCoord
from astropy import units as u
import urllib
import pandas as pd
from tqdm import tqdm
from joblib import Parallel, delayed
import multiprocessing

num_cores = multiprocessing.cpu_count()/2

# Define the end point and the SSA service to query
ssap_endpoint = "http://archive.eso.org/ssap"
ssap_service = vo.dal.SSAService(ssap_endpoint)

fields = ["COLLECTION", "TARGETNAME", "s_ra", "s_dec", "APERTURE",
          "em_min", "em_max", "SPECRP", "SNR", "t_min", "t_max",
          "CREATORDID", "access_url"]
sys.path.append('../archive_digger')
import archive_digger as ad

def query_eso(ra, dec, size, instru='HARPS', min_snr=1):
    pos = SkyCoord(ra=ra, dec=dec, unit=(u.hourangle, u.deg))
    ssap_resultset = ssap_service.search(pos=pos.fk5, diameter=size)
    df=ssap_resultset.to_table().to_pandas()
    df=df[(df['COLLECTION']==instru) & (df['SNR']>min_snr)]
    return df

tois = ad.get_tois() 
ras = tois['RA'].values
decs= tois['Dec'].values
tics= tois['TIC ID'].values

diameter = 30 #deg
size = diameter*u.deg
min_snr = 1
nspectra = {}
for ra,dec,tic in tqdm(zip(ras,decs,tics)):
    df = query_eso(ra, dec, size, instru='HARPS', min_snr=min_snr)
    nspectra[tic] = len(df)

#results = Parallel(n_jobs=num_cores)(delayed(query_eso)(ra,dec,tic) for for ra,dec,tic in tqdm(zip(ras,decs,tics)))



d=pd.DataFrame([harps,uves,feros]).T
d.columns=['harps','uves','feros']
final=pd.merge(d,tois,right_on='TIC ID', left_index=True)
# final=final[['harps','feros','TIC ID','TOI']].sort_values('TOI')
final.sort_values('TOI').to_csv('toi_with_eso_data.csv',index=False)
