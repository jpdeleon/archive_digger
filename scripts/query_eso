#!/usr/bin/env python
import sys
from os.path import exists, join
from os import makedirs
import argparse
import pyvo as vo
from astropy.coordinates import SkyCoord
from astropy import units as u
import urllib
from tqdm import tqdm
import deepdish as dd

import warnings
from astropy.utils.exceptions import AstropyWarning
sys.path.append('../archive_digger')
import archive_digger as ad

# Define the end point and the SSA service to query
ssap_endpoint = "http://archive.eso.org/ssap"
ssap_service = vo.dal.SSAService(ssap_endpoint)

parser = argparse.ArgumentParser(description="""
                query ESO data via {}""".format(ssap_endpoint),
                usage='use "%(prog)s --help" for more information',
                formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-ra', help='R.A. [deg]', type=float, default=None)
parser.add_argument('-dec', help='Dec. [deg]', type=float, default=None)
parser.add_argument('-snr', help='minimum SNR', type=float, default=None)
parser.add_argument('-d', '--diameter', help='diameter [arcsec]', default=30, type=float)
parser.add_argument('-i', '--instru', help='RV instrument', default='HARPS',
                    type=str, choices=['harps','feros','uves','xshooter'])
parser.add_argument('-o', '--outdir', help='output directory', default='.')
parser.add_argument('-toi', help='toi', type=float, default=None)
parser.add_argument('-tic', help='tic ID', type=int, default=None)
parser.add_argument('-tics', help='list of tic IDs', type=list, default=None)
parser.add_argument('-v', '--verbose', help='verbose (default=False)',
                    action='store_true', default=False)
parser.add_argument('-c', '--clobber', help='re-download files (default=False)',
                    action='store_true', default=False)
parser.add_argument('-save_fits', help='save all available data (default=False)',
                    action='store_true', default=False)
parser.add_argument('-save_csv', help='save eso results into csv (default=False)',
                    action='store_true', default=False)

args = parser.parse_args()
ra   = args.ra
dec  = args.dec
diameter = args.diameter*u.arcsec
instru = args.instru.upper()
min_snr = args.snr
outdir = args.outdir
verbose = args.verbose
clobber = args.clobber
save_csv = args.save_csv
save_fits = args.save_fits
toi = args.toi
tic = args.tic

if __name__ == '__main__':
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', AstropyWarning)
        if ra and dec:
            target_coord = SkyCoord(ra=ra, dec=dec, unit=(u.deg, u.deg))
        elif tic is not None or toi is not None:
            q = ad.query_toi(toi=toi, tic=tic, clobber=clobber)
            if len(q)>0:
                r = q['RA'].values[0]
                d = q['Dec'].values[0]
            else:
                sys.exit('TIC/ TOI does not exist.\n')

            if tic is None:
                tic = q['TIC ID'].values[0]
            if toi is None:
                toi = q['TOI'].values[0]
            target_coord = SkyCoord(ra=r, dec=d, unit=(u.hourangle, u.deg))

        else:
            sys.exit('Supply [ra,dec] or [tic] or [toi]')
            #if ra is None and dec is None:
            #    ra = 84.29125
            #    dec= -80.46917
            #    target_coord = SkyCoord(ra=ra, dec=dec, unit=u.deg)
        if diameter is None:
            diameter = 0.5*u.deg
        if min_snr is None:
            min_snr = 1

        if verbose:
            if tic is not None:
                print('\n======TIC {}======'.format(tic))
            elif toi is not None:
                print('\n======TOI {}======'.format(toi))
            print('Querying region at ra,dec=({:.3f},{:.3f}) with diameter={}'\
                  .format(target_coord.ra.deg, target_coord.dec.deg, diameter))

        ssap_resultset = ssap_service.search(pos=target_coord.fk5, diameter=diameter)

        #convert vottable to dataframe
        df = ssap_resultset.to_table().to_pandas()

        #decode bytes to str
        df["COLLECTION"] = df["COLLECTION"].apply(lambda x: x.decode())
        df["dp_id"]      = df["dp_id"].apply(lambda x: x.decode())
        df["CREATORDID"] = df["CREATORDID"].apply(lambda x: x.decode())
        df["access_url"] = df["access_url"].apply(lambda x: x.decode())
        df['TARGETNAME'] = df['TARGETNAME'].apply(lambda x: x.decode())

        print('Available data:\n{: <10} {: <10}'.format('Instrument', 'Nspectra'))
        for k,d in df.groupby('COLLECTION'):
            print('{: <10} {: <10}'.format(k, len(d)))

        fields = ["COLLECTION", "TARGETNAME", "s_ra", "s_dec", "APERTURE",
              "em_min", "em_max", "SPECRP", "SNR", "t_min", "t_max",
              "CREATORDID", "access_url", "dp_id"]

        #appply filters
        filter = (df['COLLECTION']==instru).values & (df["SNR"] > min_snr).values
        df = df.loc[filter,fields]
        if  len(df)==0:
            raise ValueError('No ESO data found.\n')
        elif len(df)>0:
            # if verbose:
            print('\nFound {} {} spectra with SNR>{}\n'.format(len(df),
                                                            instru, min_snr))
            targetnames = df['TARGETNAME'].apply(lambda x: str(x).replace('-','')).unique()
            if len(targetnames)>1:
                print('There are {} matches:'.format(len(targetnames)))
                #print coordinates of each match to check
                for name in targetnames:
                    try:
                        coord = SkyCoord.from_name(name)
                        print('{: <10}: ra,dec=({:.3f}, {:.3f})'.format(name,coord.ra.deg, coord.dec.deg))
                    except:
                        print('{: <10}: failed to fetch coordinates'.format(name))

            if save_fits:
                if not exists(outdir):
                     makedirs(outdir)
                id={}
                downloaded_fits=[]
                for i in tqdm(range(len(df))):
                    instrument = df.loc[i,"COLLECTION"]
                    targetname = df.loc[i,"TARGETNAME"]
                    fp = join(outdir,targetname)
                    if not exists(fp):
                         makedirs(fp)
                    try:
                        #import pdb; pdb.set_trace()
                        dp_id = df.loc[i,"dp_id"]
                        origfile = df.loc[i,"CREATORDID"][23:]
                        id[origfile] = dp_id
                        # The downloaded file is saved with the name provided by the creator of the file: origfile.
                        # Though, care should be taken, because reduced products
                        # generated by external users might have colliding CREATORDID!
                        # This "demo" script does not take into consideration this risk.
                        newfile = df.loc[i,"CREATORDID"][23:].replace(':','')
                        filename = join(fp,newfile)
                        if not exists(filename) or clobber:
                            print("Fetching file with SNR={}: {}.fits renamed to {}".format(df.loc[i,"SNR"], dp_id, newfile))
                            url = df.loc[i,"access_url"]
                            urllib.request.urlretrieve(url, filename)
                            downloaded_fits.append(filename)
                        else:
                            print("{} already exists".format(filename))
                    except:
                        print('Cannot download data. Data may not be public.')
                    print('\nDownloaded {}/{} fits files.\n'.format(len(downloaded_fits),len(df)))
            elif save_csv:
                fp = join(outdir,'tic'+str(tic))
                if not exists(fp):
                     makedirs(fp)
                #assert (targetnames)==1, 'cannot save due to 2 matches'
                if len(targetnames)>1:
                    fout=join(fp,'tic{}_{}.csv'.format(tic,'-'.join(targetnames)))
                else:
                    fout=join(fp,'tic{}_{}.csv'.format(tic,targetnames[0]))
                df.to_csv(fout,index=False)
                print('Saved: {}'.format(fout))
            else:
                if verbose:
                    print('\nPreview:\n')
                    print(df[["TARGETNAME", "s_ra", "s_dec", "APERTURE", \
                          "em_min", "em_max", "SPECRP", "SNR", "t_min", "t_max"]].head()) #df.shape
        else:
            sys.exit('\nNo data that matches the given criteria.')
